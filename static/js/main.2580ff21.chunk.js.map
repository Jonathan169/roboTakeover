{"version":3,"sources":["components/navbar/index.js","components/game.js","App.js","serviceWorker.js","index.js"],"names":["nav","props","react_default","a","createElement","className","guess","score","top","game","imageArr","images","map","url","i","key","onClick","func","src","process","data-id","alt","App","state","clicked","topscore","statements","shuffle","random","j","length","randomizer","Math","floor","_ref","_this","setState","id","unshift","console","log","navbar","this","components_game","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAYeA,MAVf,SAAaC,GACT,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,sBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAYJ,EAAMK,OAAO,2BACtCJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,UAAgCJ,EAAMM,OAAO,EAA7C,iBAA8DN,EAAMO,KAAK,KCYtEC,MAhBf,SAAcR,GACV,IAAIS,EAAST,EAAMU,OACnB,OACIT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,mBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdK,EAASE,IAAI,SAACC,EAAIC,GAChB,OAAOZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYU,IAAKD,EAAGE,QAAS,kBAAIf,EAAMgB,KAAKH,KACjEZ,EAAAC,EAAAC,cAAA,OAAKc,IAAKC,gBAAuBN,EAAKR,UAAU,SAASe,UAASN,EAAGO,IAAI,cCqCtEC,oNAxCbC,MAAM,CACJb,SAAS,CAAC,mBAAmB,uBAAuB,uBAAuB,mBAAmB,mBAAmB,0BACjHc,QAAQ,GACRjB,MAAM,EACNkB,SAAS,EACTC,WAAW,MAEbC,QAAU,SAAAC,GACV,IAAK,IAAIC,EAAID,EAAOE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC1C,IAAME,EAAaC,KAAKC,MAAMD,KAAKJ,UAAYC,EAAI,IADTK,EAER,CAACN,EAAOG,GAAaH,EAAOC,IAA7DD,EAAOC,GAFkCK,EAAA,GAE9BN,EAAOG,GAFuBG,EAAA,GAI5CC,EAAKC,SAAS,CAAC1B,SAASkB,OAExBJ,QAAQ,SAACa,GAEPF,EAAKZ,MAAMC,QAAQc,QAAQH,EAAKZ,MAAMb,SAAS2B,IAC5CF,EAAKZ,MAAMC,QAAQ,KAAKW,EAAKZ,MAAMC,QAAQ,IAC5CW,EAAKZ,MAAMb,SAAS2B,KAAMF,EAAKZ,MAAMb,SAASsB,KAAKC,MAAoB,EAAdD,KAAKJ,YAC9DO,EAAKZ,MAAMb,SAAS2B,KAAMF,EAAKZ,MAAMb,SAASsB,KAAKC,MAAoB,EAAdD,KAAKJ,UAAY,IACxEW,QAAQC,IAAI,SACZL,EAAKC,SAAS,CAACV,WAAW,UAAUnB,MAAM4B,EAAKZ,MAAMhB,MAAO,MAG9DgC,QAAQC,IAAI,SACZL,EAAKC,SAAS,CAACV,WAAW,YAAYnB,MAAM,EAAEiB,QAAQ,MAExDW,EAAKR,QAAQQ,EAAKZ,MAAMb,UACxByB,EAAKZ,MAAMhB,MAAM4B,EAAKZ,MAAME,SAASU,EAAKC,SAAS,CAACX,SAASU,EAAKZ,MAAMhB,QACxEgC,QAAQC,IAAI,sFAGZ,OAAOtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACtBH,EAAAC,EAAAC,cAACqC,EAAD,CAAKnC,MAAOoC,KAAKnB,MAAMG,WAAYlB,IAAKkC,KAAKnB,MAAME,SAAUlB,MAAOmC,KAAKnB,MAAMhB,QAC/EL,EAAAC,EAAAC,cAACuC,EAAD,CAAMhC,OAAQ+B,KAAKnB,MAAMb,SAAUO,KAAMyB,KAAKlB,kBAnChCoB,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2580ff21.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction nav(props){\n    return (\n        <nav>\n            <p className=\"navitems\">React Clicky-Game!</p>\n            <p className=\"navitems\">{props.guess||\"Click an image to begin\"}</p>\n            <p className=\"navitems\">Score: {props.score||0} | Top Score: {props.top||0}</p>\n        </nav>\n\n    )\n}\nexport default nav;","import React from \"react\";\n\n\nfunction game(props){\n    var imageArr=props.images\n    return (\n        <div className=\"game\">\n        <h1 className=\"fontc\">Click an image!</h1>\n        <div className=\"images\">\n        {imageArr.map((url,i)=>{\n           return <div className='imageCont' key={i} onClick={()=>props.func(i)}>\n            <img src={process.env.PUBLIC_URL+url} className=\"gimage\" data-id={i} alt=\"url\" />\n            </div>\n        })}\n\n        </div>\n        </div>\n    )\n}\nexport default game;\n","import React, {Component }from 'react';\nimport Nav from \"./components/navbar\"\nimport Game from \"./components/game\"\nimport './App.css';\n\n\n\nclass App extends React.Component {\n  state={\n    imageArr:[\"/images/c3po.jpg\",\"/images/chillbot.jpg\",\"/images/hightbot.jpg\",\"/images/r2d2.jpg\",\"/images/robo.jpg\",\"/images/terminator.jpg\"],\n    clicked:[],\n    score:0,\n    topscore:0,\n    statements:\"\"\n  }\n  shuffle = random => {\n  for (let j = random.length - 1; j > 0; j--) {\n    const randomizer = Math.floor(Math.random() * (j + 1));\n    [random[j], random[randomizer]] = [random[randomizer], random[j]];\n  }\n  this.setState({imageArr:random});\n};\n  clicked=(id)=>{\n    \n    this.state.clicked.unshift(this.state.imageArr[id]);\n    if(this.state.clicked[0]!==this.state.clicked[1]&&\n      this.state.imageArr[id]!==this.state.imageArr[Math.floor(Math.random()*2)]&&\n      this.state.imageArr[id]!==this.state.imageArr[Math.floor(Math.random()*3)+2]){\n        console.log(\"right\")\n        this.setState({statements:\"correct\",score:this.state.score +1})\n    }\n    else{\n      console.log(\"wrong\")\n      this.setState({statements:\"Incorrect\",score:0,clicked:[]})\n    }\n    this.shuffle(this.state.imageArr)\n    this.state.score>this.state.topscore?this.setState({topscore:this.state.score}):\n    console.log(\"not quite\")\n  }\n  render() {\n    return <div className=\"conatiner\">\n    <Nav guess={this.state.statements} top={this.state.topscore} score={this.state.score}></Nav>\n    <Game images={this.state.imageArr} func={this.clicked}></Game>\n    </div>\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}